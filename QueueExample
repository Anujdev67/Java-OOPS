package com.hexaware.abstraction;

import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
            Queue<Integer> queue = new LinkedList<>();
            
            queue.add(10);
            queue.add(20);
            queue.add(30);
            queue.add(40);
            queue.add(50);
            
            System.out.println("Queue: " + queue);
            
            System.out.println("Removed: " + queue.remove());
            System.out.println("Head: " + queue.peek());
            System.out.println("Polled: " + queue.poll());
            
            System.out.println("Queue after operations: " + queue);
        }
}
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	// Create a queue using Ll
//        Queue<Integer> queue = new LinkedList<>();
//
//       
//        queue.add(10);
//        queue.add(20);
//        queue.add(30);
//        queue.add(40);
//        queue.add(50);
//
//       
//        System.out.println("Queue: " + queue);
//
//        // Remove and retrieve the head of the queue
//        int removedElement = queue.remove();
//        System.out.println("Removed Element: " + removedElement);
//
//        // Display the element at the head of the queue without removing it
//        int head = queue.peek();
//        System.out.println("Head of the queue: " + head);
//
//        // Poll the head (retrieves and removes) of the queue
//        int polledElement = queue.poll();
//        System.out.println("Polled Element: " + polledElement);
//
//        // Result queues
//        System.out.println("Queue after operations: " + queue);
//    }
// }

